// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto;
namespace exchange {
class CancelOrder;
struct CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class ExchangeMessage;
struct ExchangeMessageDefaultTypeInternal;
extern ExchangeMessageDefaultTypeInternal _ExchangeMessage_default_instance_;
class FlushOrder;
struct FlushOrderDefaultTypeInternal;
extern FlushOrderDefaultTypeInternal _FlushOrder_default_instance_;
class NewOrder;
struct NewOrderDefaultTypeInternal;
extern NewOrderDefaultTypeInternal _NewOrder_default_instance_;
class OrderAcknowledgement;
struct OrderAcknowledgementDefaultTypeInternal;
extern OrderAcknowledgementDefaultTypeInternal _OrderAcknowledgement_default_instance_;
class TopOfBookChange;
struct TopOfBookChangeDefaultTypeInternal;
extern TopOfBookChangeDefaultTypeInternal _TopOfBookChange_default_instance_;
class TradeConfirmation;
struct TradeConfirmationDefaultTypeInternal;
extern TradeConfirmationDefaultTypeInternal _TradeConfirmation_default_instance_;
}  // namespace exchange
PROTOBUF_NAMESPACE_OPEN
template<> ::exchange::CancelOrder* Arena::CreateMaybeMessage<::exchange::CancelOrder>(Arena*);
template<> ::exchange::ExchangeMessage* Arena::CreateMaybeMessage<::exchange::ExchangeMessage>(Arena*);
template<> ::exchange::FlushOrder* Arena::CreateMaybeMessage<::exchange::FlushOrder>(Arena*);
template<> ::exchange::NewOrder* Arena::CreateMaybeMessage<::exchange::NewOrder>(Arena*);
template<> ::exchange::OrderAcknowledgement* Arena::CreateMaybeMessage<::exchange::OrderAcknowledgement>(Arena*);
template<> ::exchange::TopOfBookChange* Arena::CreateMaybeMessage<::exchange::TopOfBookChange>(Arena*);
template<> ::exchange::TradeConfirmation* Arena::CreateMaybeMessage<::exchange::TradeConfirmation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace exchange {

enum NewOrder_SideType : int {
  NewOrder_SideType_BUY = 0,
  NewOrder_SideType_SELL = 1,
  NewOrder_SideType_NewOrder_SideType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NewOrder_SideType_NewOrder_SideType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NewOrder_SideType_IsValid(int value);
constexpr NewOrder_SideType NewOrder_SideType_SideType_MIN = NewOrder_SideType_BUY;
constexpr NewOrder_SideType NewOrder_SideType_SideType_MAX = NewOrder_SideType_SELL;
constexpr int NewOrder_SideType_SideType_ARRAYSIZE = NewOrder_SideType_SideType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewOrder_SideType_descriptor();
template<typename T>
inline const std::string& NewOrder_SideType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NewOrder_SideType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NewOrder_SideType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NewOrder_SideType_descriptor(), enum_t_value);
}
inline bool NewOrder_SideType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NewOrder_SideType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NewOrder_SideType>(
    NewOrder_SideType_descriptor(), name, value);
}
enum TopOfBookChange_SideType : int {
  TopOfBookChange_SideType_BUY = 0,
  TopOfBookChange_SideType_SELL = 1,
  TopOfBookChange_SideType_TopOfBookChange_SideType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TopOfBookChange_SideType_TopOfBookChange_SideType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TopOfBookChange_SideType_IsValid(int value);
constexpr TopOfBookChange_SideType TopOfBookChange_SideType_SideType_MIN = TopOfBookChange_SideType_BUY;
constexpr TopOfBookChange_SideType TopOfBookChange_SideType_SideType_MAX = TopOfBookChange_SideType_SELL;
constexpr int TopOfBookChange_SideType_SideType_ARRAYSIZE = TopOfBookChange_SideType_SideType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TopOfBookChange_SideType_descriptor();
template<typename T>
inline const std::string& TopOfBookChange_SideType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TopOfBookChange_SideType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TopOfBookChange_SideType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TopOfBookChange_SideType_descriptor(), enum_t_value);
}
inline bool TopOfBookChange_SideType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TopOfBookChange_SideType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TopOfBookChange_SideType>(
    TopOfBookChange_SideType_descriptor(), name, value);
}
// ===================================================================

class NewOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.NewOrder) */ {
 public:
  inline NewOrder() : NewOrder(nullptr) {}
  ~NewOrder() override;
  explicit constexpr NewOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewOrder(const NewOrder& from);
  NewOrder(NewOrder&& from) noexcept
    : NewOrder() {
    *this = ::std::move(from);
  }

  inline NewOrder& operator=(const NewOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOrder& operator=(NewOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOrder* internal_default_instance() {
    return reinterpret_cast<const NewOrder*>(
               &_NewOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewOrder& a, NewOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(NewOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewOrder* New() const final {
    return new NewOrder();
  }

  NewOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewOrder& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.NewOrder";
  }
  protected:
  explicit NewOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NewOrder_SideType SideType;
  static constexpr SideType BUY =
    NewOrder_SideType_BUY;
  static constexpr SideType SELL =
    NewOrder_SideType_SELL;
  static inline bool SideType_IsValid(int value) {
    return NewOrder_SideType_IsValid(value);
  }
  static constexpr SideType SideType_MIN =
    NewOrder_SideType_SideType_MIN;
  static constexpr SideType SideType_MAX =
    NewOrder_SideType_SideType_MAX;
  static constexpr int SideType_ARRAYSIZE =
    NewOrder_SideType_SideType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SideType_descriptor() {
    return NewOrder_SideType_descriptor();
  }
  template<typename T>
  static inline const std::string& SideType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SideType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SideType_Name.");
    return NewOrder_SideType_Name(enum_t_value);
  }
  static inline bool SideType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SideType* value) {
    return NewOrder_SideType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kUserFieldNumber = 1,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 4,
    kSideFieldNumber = 5,
    kUserOrderFieldNumber = 6,
  };
  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint32 user = 1;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::uint32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user() const;
  void _internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price = 3;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 quantity = 4;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .exchange.NewOrder.SideType side = 5;
  void clear_side();
  ::exchange::NewOrder_SideType side() const;
  void set_side(::exchange::NewOrder_SideType value);
  private:
  ::exchange::NewOrder_SideType _internal_side() const;
  void _internal_set_side(::exchange::NewOrder_SideType value);
  public:

  // uint32 userOrder = 6;
  void clear_userorder();
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder() const;
  void set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userorder() const;
  void _internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:exchange.NewOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity_;
  int side_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class CancelOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {}
  ~CancelOrder() override;
  explicit constexpr CancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrder(const CancelOrder& from);
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return new CancelOrder();
  }

  CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelOrder& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.CancelOrder";
  }
  protected:
  explicit CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kUserOrderFieldNumber = 2,
  };
  // uint32 user = 1;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::uint32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user() const;
  void _internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userOrder = 2;
  void clear_userorder();
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder() const;
  void set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userorder() const;
  void _internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:exchange.CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class FlushOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.FlushOrder) */ {
 public:
  inline FlushOrder() : FlushOrder(nullptr) {}
  ~FlushOrder() override;
  explicit constexpr FlushOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushOrder(const FlushOrder& from);
  FlushOrder(FlushOrder&& from) noexcept
    : FlushOrder() {
    *this = ::std::move(from);
  }

  inline FlushOrder& operator=(const FlushOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushOrder& operator=(FlushOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushOrder* internal_default_instance() {
    return reinterpret_cast<const FlushOrder*>(
               &_FlushOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FlushOrder& a, FlushOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushOrder* New() const final {
    return new FlushOrder();
  }

  FlushOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlushOrder& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.FlushOrder";
  }
  protected:
  explicit FlushOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:exchange.FlushOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OrderAcknowledgement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.OrderAcknowledgement) */ {
 public:
  inline OrderAcknowledgement() : OrderAcknowledgement(nullptr) {}
  ~OrderAcknowledgement() override;
  explicit constexpr OrderAcknowledgement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderAcknowledgement(const OrderAcknowledgement& from);
  OrderAcknowledgement(OrderAcknowledgement&& from) noexcept
    : OrderAcknowledgement() {
    *this = ::std::move(from);
  }

  inline OrderAcknowledgement& operator=(const OrderAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAcknowledgement& operator=(OrderAcknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderAcknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const OrderAcknowledgement*>(
               &_OrderAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderAcknowledgement& a, OrderAcknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAcknowledgement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAcknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderAcknowledgement* New() const final {
    return new OrderAcknowledgement();
  }

  OrderAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderAcknowledgement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderAcknowledgement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderAcknowledgement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAcknowledgement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.OrderAcknowledgement";
  }
  protected:
  explicit OrderAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 99,
    kUserFieldNumber = 1,
    kUserOrderFieldNumber = 2,
  };
  // string symbol = 99;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint32 user = 1;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::uint32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user() const;
  void _internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userOrder = 2;
  void clear_userorder();
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder() const;
  void set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userorder() const;
  void _internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:exchange.OrderAcknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class TradeConfirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.TradeConfirmation) */ {
 public:
  inline TradeConfirmation() : TradeConfirmation(nullptr) {}
  ~TradeConfirmation() override;
  explicit constexpr TradeConfirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeConfirmation(const TradeConfirmation& from);
  TradeConfirmation(TradeConfirmation&& from) noexcept
    : TradeConfirmation() {
    *this = ::std::move(from);
  }

  inline TradeConfirmation& operator=(const TradeConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeConfirmation& operator=(TradeConfirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeConfirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeConfirmation* internal_default_instance() {
    return reinterpret_cast<const TradeConfirmation*>(
               &_TradeConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TradeConfirmation& a, TradeConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeConfirmation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeConfirmation* New() const final {
    return new TradeConfirmation();
  }

  TradeConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeConfirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeConfirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TradeConfirmation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.TradeConfirmation";
  }
  protected:
  explicit TradeConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserOrderIdBuyFieldNumber = 2,
    kSymbolFieldNumber = 99,
    kUserIdBuyFieldNumber = 1,
    kUserIdSellFieldNumber = 3,
    kUserOrderIdSellFieldNumber = 4,
    kPriceFieldNumber = 5,
    kQuantityFieldNumber = 6,
  };
  // string userOrderIdBuy = 2;
  void clear_userorderidbuy();
  const std::string& userorderidbuy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userorderidbuy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userorderidbuy();
  PROTOBUF_MUST_USE_RESULT std::string* release_userorderidbuy();
  void set_allocated_userorderidbuy(std::string* userorderidbuy);
  private:
  const std::string& _internal_userorderidbuy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userorderidbuy(const std::string& value);
  std::string* _internal_mutable_userorderidbuy();
  public:

  // string symbol = 99;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint32 userIdBuy = 1;
  void clear_useridbuy();
  ::PROTOBUF_NAMESPACE_ID::uint32 useridbuy() const;
  void set_useridbuy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_useridbuy() const;
  void _internal_set_useridbuy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userIdSell = 3;
  void clear_useridsell();
  ::PROTOBUF_NAMESPACE_ID::uint32 useridsell() const;
  void set_useridsell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_useridsell() const;
  void _internal_set_useridsell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userOrderIdSell = 4;
  void clear_userorderidsell();
  ::PROTOBUF_NAMESPACE_ID::uint32 userorderidsell() const;
  void set_userorderidsell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userorderidsell() const;
  void _internal_set_userorderidsell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 quantity = 6;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:exchange.TradeConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userorderidbuy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 useridbuy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 useridsell_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userorderidsell_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class TopOfBookChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.TopOfBookChange) */ {
 public:
  inline TopOfBookChange() : TopOfBookChange(nullptr) {}
  ~TopOfBookChange() override;
  explicit constexpr TopOfBookChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopOfBookChange(const TopOfBookChange& from);
  TopOfBookChange(TopOfBookChange&& from) noexcept
    : TopOfBookChange() {
    *this = ::std::move(from);
  }

  inline TopOfBookChange& operator=(const TopOfBookChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopOfBookChange& operator=(TopOfBookChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopOfBookChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopOfBookChange* internal_default_instance() {
    return reinterpret_cast<const TopOfBookChange*>(
               &_TopOfBookChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TopOfBookChange& a, TopOfBookChange& b) {
    a.Swap(&b);
  }
  inline void Swap(TopOfBookChange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopOfBookChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopOfBookChange* New() const final {
    return new TopOfBookChange();
  }

  TopOfBookChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopOfBookChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopOfBookChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopOfBookChange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopOfBookChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.TopOfBookChange";
  }
  protected:
  explicit TopOfBookChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TopOfBookChange_SideType SideType;
  static constexpr SideType BUY =
    TopOfBookChange_SideType_BUY;
  static constexpr SideType SELL =
    TopOfBookChange_SideType_SELL;
  static inline bool SideType_IsValid(int value) {
    return TopOfBookChange_SideType_IsValid(value);
  }
  static constexpr SideType SideType_MIN =
    TopOfBookChange_SideType_SideType_MIN;
  static constexpr SideType SideType_MAX =
    TopOfBookChange_SideType_SideType_MAX;
  static constexpr int SideType_ARRAYSIZE =
    TopOfBookChange_SideType_SideType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SideType_descriptor() {
    return TopOfBookChange_SideType_descriptor();
  }
  template<typename T>
  static inline const std::string& SideType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SideType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SideType_Name.");
    return TopOfBookChange_SideType_Name(enum_t_value);
  }
  static inline bool SideType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SideType* value) {
    return TopOfBookChange_SideType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 99,
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // string symbol = 99;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint32 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:exchange.TopOfBookChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ExchangeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exchange.ExchangeMessage) */ {
 public:
  inline ExchangeMessage() : ExchangeMessage(nullptr) {}
  ~ExchangeMessage() override;
  explicit constexpr ExchangeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeMessage(const ExchangeMessage& from);
  ExchangeMessage(ExchangeMessage&& from) noexcept
    : ExchangeMessage() {
    *this = ::std::move(from);
  }

  inline ExchangeMessage& operator=(const ExchangeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeMessage& operator=(ExchangeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeMessage& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kNewOrder = 2,
    kCancelOrder = 3,
    kFlushOrder = 5,
    kOrderAcknowledgement = 8,
    kTradeConfirmation = 13,
    kTopOfBookChange = 21,
    COMMAND_NOT_SET = 0,
  };

  static inline const ExchangeMessage* internal_default_instance() {
    return reinterpret_cast<const ExchangeMessage*>(
               &_ExchangeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExchangeMessage& a, ExchangeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeMessage* New() const final {
    return new ExchangeMessage();
  }

  ExchangeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExchangeMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "exchange.ExchangeMessage";
  }
  protected:
  explicit ExchangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kNewOrderFieldNumber = 2,
    kCancelOrderFieldNumber = 3,
    kFlushOrderFieldNumber = 5,
    kOrderAcknowledgementFieldNumber = 8,
    kTradeConfirmationFieldNumber = 13,
    kTopOfBookChangeFieldNumber = 21,
  };
  // uint64 sequenceNumber = 1;
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .exchange.NewOrder newOrder = 2;
  bool has_neworder() const;
  private:
  bool _internal_has_neworder() const;
  public:
  void clear_neworder();
  const ::exchange::NewOrder& neworder() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::NewOrder* release_neworder();
  ::exchange::NewOrder* mutable_neworder();
  void set_allocated_neworder(::exchange::NewOrder* neworder);
  private:
  const ::exchange::NewOrder& _internal_neworder() const;
  ::exchange::NewOrder* _internal_mutable_neworder();
  public:
  void unsafe_arena_set_allocated_neworder(
      ::exchange::NewOrder* neworder);
  ::exchange::NewOrder* unsafe_arena_release_neworder();

  // .exchange.CancelOrder cancelOrder = 3;
  bool has_cancelorder() const;
  private:
  bool _internal_has_cancelorder() const;
  public:
  void clear_cancelorder();
  const ::exchange::CancelOrder& cancelorder() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::CancelOrder* release_cancelorder();
  ::exchange::CancelOrder* mutable_cancelorder();
  void set_allocated_cancelorder(::exchange::CancelOrder* cancelorder);
  private:
  const ::exchange::CancelOrder& _internal_cancelorder() const;
  ::exchange::CancelOrder* _internal_mutable_cancelorder();
  public:
  void unsafe_arena_set_allocated_cancelorder(
      ::exchange::CancelOrder* cancelorder);
  ::exchange::CancelOrder* unsafe_arena_release_cancelorder();

  // .exchange.FlushOrder flushOrder = 5;
  bool has_flushorder() const;
  private:
  bool _internal_has_flushorder() const;
  public:
  void clear_flushorder();
  const ::exchange::FlushOrder& flushorder() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::FlushOrder* release_flushorder();
  ::exchange::FlushOrder* mutable_flushorder();
  void set_allocated_flushorder(::exchange::FlushOrder* flushorder);
  private:
  const ::exchange::FlushOrder& _internal_flushorder() const;
  ::exchange::FlushOrder* _internal_mutable_flushorder();
  public:
  void unsafe_arena_set_allocated_flushorder(
      ::exchange::FlushOrder* flushorder);
  ::exchange::FlushOrder* unsafe_arena_release_flushorder();

  // .exchange.OrderAcknowledgement orderAcknowledgement = 8;
  bool has_orderacknowledgement() const;
  private:
  bool _internal_has_orderacknowledgement() const;
  public:
  void clear_orderacknowledgement();
  const ::exchange::OrderAcknowledgement& orderacknowledgement() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::OrderAcknowledgement* release_orderacknowledgement();
  ::exchange::OrderAcknowledgement* mutable_orderacknowledgement();
  void set_allocated_orderacknowledgement(::exchange::OrderAcknowledgement* orderacknowledgement);
  private:
  const ::exchange::OrderAcknowledgement& _internal_orderacknowledgement() const;
  ::exchange::OrderAcknowledgement* _internal_mutable_orderacknowledgement();
  public:
  void unsafe_arena_set_allocated_orderacknowledgement(
      ::exchange::OrderAcknowledgement* orderacknowledgement);
  ::exchange::OrderAcknowledgement* unsafe_arena_release_orderacknowledgement();

  // .exchange.TradeConfirmation tradeConfirmation = 13;
  bool has_tradeconfirmation() const;
  private:
  bool _internal_has_tradeconfirmation() const;
  public:
  void clear_tradeconfirmation();
  const ::exchange::TradeConfirmation& tradeconfirmation() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::TradeConfirmation* release_tradeconfirmation();
  ::exchange::TradeConfirmation* mutable_tradeconfirmation();
  void set_allocated_tradeconfirmation(::exchange::TradeConfirmation* tradeconfirmation);
  private:
  const ::exchange::TradeConfirmation& _internal_tradeconfirmation() const;
  ::exchange::TradeConfirmation* _internal_mutable_tradeconfirmation();
  public:
  void unsafe_arena_set_allocated_tradeconfirmation(
      ::exchange::TradeConfirmation* tradeconfirmation);
  ::exchange::TradeConfirmation* unsafe_arena_release_tradeconfirmation();

  // .exchange.TopOfBookChange topOfBookChange = 21;
  bool has_topofbookchange() const;
  private:
  bool _internal_has_topofbookchange() const;
  public:
  void clear_topofbookchange();
  const ::exchange::TopOfBookChange& topofbookchange() const;
  PROTOBUF_MUST_USE_RESULT ::exchange::TopOfBookChange* release_topofbookchange();
  ::exchange::TopOfBookChange* mutable_topofbookchange();
  void set_allocated_topofbookchange(::exchange::TopOfBookChange* topofbookchange);
  private:
  const ::exchange::TopOfBookChange& _internal_topofbookchange() const;
  ::exchange::TopOfBookChange* _internal_mutable_topofbookchange();
  public:
  void unsafe_arena_set_allocated_topofbookchange(
      ::exchange::TopOfBookChange* topofbookchange);
  ::exchange::TopOfBookChange* unsafe_arena_release_topofbookchange();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:exchange.ExchangeMessage)
 private:
  class _Internal;
  void set_has_neworder();
  void set_has_cancelorder();
  void set_has_flushorder();
  void set_has_orderacknowledgement();
  void set_has_tradeconfirmation();
  void set_has_topofbookchange();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::exchange::NewOrder* neworder_;
    ::exchange::CancelOrder* cancelorder_;
    ::exchange::FlushOrder* flushorder_;
    ::exchange::OrderAcknowledgement* orderacknowledgement_;
    ::exchange::TradeConfirmation* tradeconfirmation_;
    ::exchange::TopOfBookChange* topofbookchange_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewOrder

// uint32 user = 1;
inline void NewOrder::clear_user() {
  user_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::_internal_user() const {
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::user() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.user)
  return _internal_user();
}
inline void NewOrder::_internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_ = value;
}
inline void NewOrder::set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:exchange.NewOrder.user)
}

// string symbol = 2;
inline void NewOrder::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& NewOrder::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewOrder::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exchange.NewOrder.symbol)
}
inline std::string* NewOrder::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:exchange.NewOrder.symbol)
  return _s;
}
inline const std::string& NewOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void NewOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:exchange.NewOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:exchange.NewOrder.symbol)
}

// uint32 price = 3;
inline void NewOrder::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::price() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.price)
  return _internal_price();
}
inline void NewOrder::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void NewOrder::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:exchange.NewOrder.price)
}

// uint32 quantity = 4;
inline void NewOrder::clear_quantity() {
  quantity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::quantity() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.quantity)
  return _internal_quantity();
}
inline void NewOrder::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quantity_ = value;
}
inline void NewOrder::set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:exchange.NewOrder.quantity)
}

// .exchange.NewOrder.SideType side = 5;
inline void NewOrder::clear_side() {
  side_ = 0;
}
inline ::exchange::NewOrder_SideType NewOrder::_internal_side() const {
  return static_cast< ::exchange::NewOrder_SideType >(side_);
}
inline ::exchange::NewOrder_SideType NewOrder::side() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.side)
  return _internal_side();
}
inline void NewOrder::_internal_set_side(::exchange::NewOrder_SideType value) {
  
  side_ = value;
}
inline void NewOrder::set_side(::exchange::NewOrder_SideType value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:exchange.NewOrder.side)
}

// uint32 userOrder = 6;
inline void NewOrder::clear_userorder() {
  userorder_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::_internal_userorder() const {
  return userorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewOrder::userorder() const {
  // @@protoc_insertion_point(field_get:exchange.NewOrder.userOrder)
  return _internal_userorder();
}
inline void NewOrder::_internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userorder_ = value;
}
inline void NewOrder::set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userorder(value);
  // @@protoc_insertion_point(field_set:exchange.NewOrder.userOrder)
}

// -------------------------------------------------------------------

// CancelOrder

// uint32 user = 1;
inline void CancelOrder::clear_user() {
  user_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelOrder::_internal_user() const {
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelOrder::user() const {
  // @@protoc_insertion_point(field_get:exchange.CancelOrder.user)
  return _internal_user();
}
inline void CancelOrder::_internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_ = value;
}
inline void CancelOrder::set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:exchange.CancelOrder.user)
}

// uint32 userOrder = 2;
inline void CancelOrder::clear_userorder() {
  userorder_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelOrder::_internal_userorder() const {
  return userorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelOrder::userorder() const {
  // @@protoc_insertion_point(field_get:exchange.CancelOrder.userOrder)
  return _internal_userorder();
}
inline void CancelOrder::_internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userorder_ = value;
}
inline void CancelOrder::set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userorder(value);
  // @@protoc_insertion_point(field_set:exchange.CancelOrder.userOrder)
}

// -------------------------------------------------------------------

// FlushOrder

// -------------------------------------------------------------------

// OrderAcknowledgement

// uint32 user = 1;
inline void OrderAcknowledgement::clear_user() {
  user_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderAcknowledgement::_internal_user() const {
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderAcknowledgement::user() const {
  // @@protoc_insertion_point(field_get:exchange.OrderAcknowledgement.user)
  return _internal_user();
}
inline void OrderAcknowledgement::_internal_set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_ = value;
}
inline void OrderAcknowledgement::set_user(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:exchange.OrderAcknowledgement.user)
}

// uint32 userOrder = 2;
inline void OrderAcknowledgement::clear_userorder() {
  userorder_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderAcknowledgement::_internal_userorder() const {
  return userorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderAcknowledgement::userorder() const {
  // @@protoc_insertion_point(field_get:exchange.OrderAcknowledgement.userOrder)
  return _internal_userorder();
}
inline void OrderAcknowledgement::_internal_set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userorder_ = value;
}
inline void OrderAcknowledgement::set_userorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userorder(value);
  // @@protoc_insertion_point(field_set:exchange.OrderAcknowledgement.userOrder)
}

// string symbol = 99;
inline void OrderAcknowledgement::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& OrderAcknowledgement::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.OrderAcknowledgement.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderAcknowledgement::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exchange.OrderAcknowledgement.symbol)
}
inline std::string* OrderAcknowledgement::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:exchange.OrderAcknowledgement.symbol)
  return _s;
}
inline const std::string& OrderAcknowledgement::_internal_symbol() const {
  return symbol_.Get();
}
inline void OrderAcknowledgement::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderAcknowledgement::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderAcknowledgement::release_symbol() {
  // @@protoc_insertion_point(field_release:exchange.OrderAcknowledgement.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderAcknowledgement::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:exchange.OrderAcknowledgement.symbol)
}

// -------------------------------------------------------------------

// TradeConfirmation

// uint32 userIdBuy = 1;
inline void TradeConfirmation::clear_useridbuy() {
  useridbuy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::_internal_useridbuy() const {
  return useridbuy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::useridbuy() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.userIdBuy)
  return _internal_useridbuy();
}
inline void TradeConfirmation::_internal_set_useridbuy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  useridbuy_ = value;
}
inline void TradeConfirmation::set_useridbuy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_useridbuy(value);
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.userIdBuy)
}

// string userOrderIdBuy = 2;
inline void TradeConfirmation::clear_userorderidbuy() {
  userorderidbuy_.ClearToEmpty();
}
inline const std::string& TradeConfirmation::userorderidbuy() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.userOrderIdBuy)
  return _internal_userorderidbuy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeConfirmation::set_userorderidbuy(ArgT0&& arg0, ArgT... args) {
 
 userorderidbuy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.userOrderIdBuy)
}
inline std::string* TradeConfirmation::mutable_userorderidbuy() {
  std::string* _s = _internal_mutable_userorderidbuy();
  // @@protoc_insertion_point(field_mutable:exchange.TradeConfirmation.userOrderIdBuy)
  return _s;
}
inline const std::string& TradeConfirmation::_internal_userorderidbuy() const {
  return userorderidbuy_.Get();
}
inline void TradeConfirmation::_internal_set_userorderidbuy(const std::string& value) {
  
  userorderidbuy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeConfirmation::_internal_mutable_userorderidbuy() {
  
  return userorderidbuy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeConfirmation::release_userorderidbuy() {
  // @@protoc_insertion_point(field_release:exchange.TradeConfirmation.userOrderIdBuy)
  return userorderidbuy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeConfirmation::set_allocated_userorderidbuy(std::string* userorderidbuy) {
  if (userorderidbuy != nullptr) {
    
  } else {
    
  }
  userorderidbuy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userorderidbuy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:exchange.TradeConfirmation.userOrderIdBuy)
}

// uint32 userIdSell = 3;
inline void TradeConfirmation::clear_useridsell() {
  useridsell_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::_internal_useridsell() const {
  return useridsell_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::useridsell() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.userIdSell)
  return _internal_useridsell();
}
inline void TradeConfirmation::_internal_set_useridsell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  useridsell_ = value;
}
inline void TradeConfirmation::set_useridsell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_useridsell(value);
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.userIdSell)
}

// uint32 userOrderIdSell = 4;
inline void TradeConfirmation::clear_userorderidsell() {
  userorderidsell_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::_internal_userorderidsell() const {
  return userorderidsell_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::userorderidsell() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.userOrderIdSell)
  return _internal_userorderidsell();
}
inline void TradeConfirmation::_internal_set_userorderidsell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userorderidsell_ = value;
}
inline void TradeConfirmation::set_userorderidsell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userorderidsell(value);
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.userOrderIdSell)
}

// uint32 price = 5;
inline void TradeConfirmation::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::price() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.price)
  return _internal_price();
}
inline void TradeConfirmation::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void TradeConfirmation::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.price)
}

// uint32 quantity = 6;
inline void TradeConfirmation::clear_quantity() {
  quantity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TradeConfirmation::quantity() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.quantity)
  return _internal_quantity();
}
inline void TradeConfirmation::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quantity_ = value;
}
inline void TradeConfirmation::set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.quantity)
}

// string symbol = 99;
inline void TradeConfirmation::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TradeConfirmation::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.TradeConfirmation.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeConfirmation::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exchange.TradeConfirmation.symbol)
}
inline std::string* TradeConfirmation::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:exchange.TradeConfirmation.symbol)
  return _s;
}
inline const std::string& TradeConfirmation::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeConfirmation::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeConfirmation::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeConfirmation::release_symbol() {
  // @@protoc_insertion_point(field_release:exchange.TradeConfirmation.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeConfirmation::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:exchange.TradeConfirmation.symbol)
}

// -------------------------------------------------------------------

// TopOfBookChange

// uint32 price = 1;
inline void TopOfBookChange::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopOfBookChange::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopOfBookChange::price() const {
  // @@protoc_insertion_point(field_get:exchange.TopOfBookChange.price)
  return _internal_price();
}
inline void TopOfBookChange::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
}
inline void TopOfBookChange::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:exchange.TopOfBookChange.price)
}

// uint32 quantity = 2;
inline void TopOfBookChange::clear_quantity() {
  quantity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopOfBookChange::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopOfBookChange::quantity() const {
  // @@protoc_insertion_point(field_get:exchange.TopOfBookChange.quantity)
  return _internal_quantity();
}
inline void TopOfBookChange::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quantity_ = value;
}
inline void TopOfBookChange::set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:exchange.TopOfBookChange.quantity)
}

// string symbol = 99;
inline void TopOfBookChange::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& TopOfBookChange::symbol() const {
  // @@protoc_insertion_point(field_get:exchange.TopOfBookChange.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopOfBookChange::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exchange.TopOfBookChange.symbol)
}
inline std::string* TopOfBookChange::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:exchange.TopOfBookChange.symbol)
  return _s;
}
inline const std::string& TopOfBookChange::_internal_symbol() const {
  return symbol_.Get();
}
inline void TopOfBookChange::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TopOfBookChange::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TopOfBookChange::release_symbol() {
  // @@protoc_insertion_point(field_release:exchange.TopOfBookChange.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TopOfBookChange::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:exchange.TopOfBookChange.symbol)
}

// -------------------------------------------------------------------

// ExchangeMessage

// uint64 sequenceNumber = 1;
inline void ExchangeMessage::clear_sequencenumber() {
  sequencenumber_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExchangeMessage::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExchangeMessage::sequencenumber() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.sequenceNumber)
  return _internal_sequencenumber();
}
inline void ExchangeMessage::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequencenumber_ = value;
}
inline void ExchangeMessage::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:exchange.ExchangeMessage.sequenceNumber)
}

// .exchange.NewOrder newOrder = 2;
inline bool ExchangeMessage::_internal_has_neworder() const {
  return command_case() == kNewOrder;
}
inline bool ExchangeMessage::has_neworder() const {
  return _internal_has_neworder();
}
inline void ExchangeMessage::set_has_neworder() {
  _oneof_case_[0] = kNewOrder;
}
inline void ExchangeMessage::clear_neworder() {
  if (_internal_has_neworder()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.neworder_;
    }
    clear_has_command();
  }
}
inline ::exchange::NewOrder* ExchangeMessage::release_neworder() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.newOrder)
  if (_internal_has_neworder()) {
    clear_has_command();
      ::exchange::NewOrder* temp = command_.neworder_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.neworder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::NewOrder& ExchangeMessage::_internal_neworder() const {
  return _internal_has_neworder()
      ? *command_.neworder_
      : reinterpret_cast< ::exchange::NewOrder&>(::exchange::_NewOrder_default_instance_);
}
inline const ::exchange::NewOrder& ExchangeMessage::neworder() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.newOrder)
  return _internal_neworder();
}
inline ::exchange::NewOrder* ExchangeMessage::unsafe_arena_release_neworder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.newOrder)
  if (_internal_has_neworder()) {
    clear_has_command();
    ::exchange::NewOrder* temp = command_.neworder_;
    command_.neworder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_neworder(::exchange::NewOrder* neworder) {
  clear_command();
  if (neworder) {
    set_has_neworder();
    command_.neworder_ = neworder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.newOrder)
}
inline ::exchange::NewOrder* ExchangeMessage::_internal_mutable_neworder() {
  if (!_internal_has_neworder()) {
    clear_command();
    set_has_neworder();
    command_.neworder_ = CreateMaybeMessage< ::exchange::NewOrder >(GetArenaForAllocation());
  }
  return command_.neworder_;
}
inline ::exchange::NewOrder* ExchangeMessage::mutable_neworder() {
  ::exchange::NewOrder* _msg = _internal_mutable_neworder();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.newOrder)
  return _msg;
}

// .exchange.CancelOrder cancelOrder = 3;
inline bool ExchangeMessage::_internal_has_cancelorder() const {
  return command_case() == kCancelOrder;
}
inline bool ExchangeMessage::has_cancelorder() const {
  return _internal_has_cancelorder();
}
inline void ExchangeMessage::set_has_cancelorder() {
  _oneof_case_[0] = kCancelOrder;
}
inline void ExchangeMessage::clear_cancelorder() {
  if (_internal_has_cancelorder()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.cancelorder_;
    }
    clear_has_command();
  }
}
inline ::exchange::CancelOrder* ExchangeMessage::release_cancelorder() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.cancelOrder)
  if (_internal_has_cancelorder()) {
    clear_has_command();
      ::exchange::CancelOrder* temp = command_.cancelorder_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.cancelorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::CancelOrder& ExchangeMessage::_internal_cancelorder() const {
  return _internal_has_cancelorder()
      ? *command_.cancelorder_
      : reinterpret_cast< ::exchange::CancelOrder&>(::exchange::_CancelOrder_default_instance_);
}
inline const ::exchange::CancelOrder& ExchangeMessage::cancelorder() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.cancelOrder)
  return _internal_cancelorder();
}
inline ::exchange::CancelOrder* ExchangeMessage::unsafe_arena_release_cancelorder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.cancelOrder)
  if (_internal_has_cancelorder()) {
    clear_has_command();
    ::exchange::CancelOrder* temp = command_.cancelorder_;
    command_.cancelorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_cancelorder(::exchange::CancelOrder* cancelorder) {
  clear_command();
  if (cancelorder) {
    set_has_cancelorder();
    command_.cancelorder_ = cancelorder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.cancelOrder)
}
inline ::exchange::CancelOrder* ExchangeMessage::_internal_mutable_cancelorder() {
  if (!_internal_has_cancelorder()) {
    clear_command();
    set_has_cancelorder();
    command_.cancelorder_ = CreateMaybeMessage< ::exchange::CancelOrder >(GetArenaForAllocation());
  }
  return command_.cancelorder_;
}
inline ::exchange::CancelOrder* ExchangeMessage::mutable_cancelorder() {
  ::exchange::CancelOrder* _msg = _internal_mutable_cancelorder();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.cancelOrder)
  return _msg;
}

// .exchange.FlushOrder flushOrder = 5;
inline bool ExchangeMessage::_internal_has_flushorder() const {
  return command_case() == kFlushOrder;
}
inline bool ExchangeMessage::has_flushorder() const {
  return _internal_has_flushorder();
}
inline void ExchangeMessage::set_has_flushorder() {
  _oneof_case_[0] = kFlushOrder;
}
inline void ExchangeMessage::clear_flushorder() {
  if (_internal_has_flushorder()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.flushorder_;
    }
    clear_has_command();
  }
}
inline ::exchange::FlushOrder* ExchangeMessage::release_flushorder() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.flushOrder)
  if (_internal_has_flushorder()) {
    clear_has_command();
      ::exchange::FlushOrder* temp = command_.flushorder_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.flushorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::FlushOrder& ExchangeMessage::_internal_flushorder() const {
  return _internal_has_flushorder()
      ? *command_.flushorder_
      : reinterpret_cast< ::exchange::FlushOrder&>(::exchange::_FlushOrder_default_instance_);
}
inline const ::exchange::FlushOrder& ExchangeMessage::flushorder() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.flushOrder)
  return _internal_flushorder();
}
inline ::exchange::FlushOrder* ExchangeMessage::unsafe_arena_release_flushorder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.flushOrder)
  if (_internal_has_flushorder()) {
    clear_has_command();
    ::exchange::FlushOrder* temp = command_.flushorder_;
    command_.flushorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_flushorder(::exchange::FlushOrder* flushorder) {
  clear_command();
  if (flushorder) {
    set_has_flushorder();
    command_.flushorder_ = flushorder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.flushOrder)
}
inline ::exchange::FlushOrder* ExchangeMessage::_internal_mutable_flushorder() {
  if (!_internal_has_flushorder()) {
    clear_command();
    set_has_flushorder();
    command_.flushorder_ = CreateMaybeMessage< ::exchange::FlushOrder >(GetArenaForAllocation());
  }
  return command_.flushorder_;
}
inline ::exchange::FlushOrder* ExchangeMessage::mutable_flushorder() {
  ::exchange::FlushOrder* _msg = _internal_mutable_flushorder();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.flushOrder)
  return _msg;
}

// .exchange.OrderAcknowledgement orderAcknowledgement = 8;
inline bool ExchangeMessage::_internal_has_orderacknowledgement() const {
  return command_case() == kOrderAcknowledgement;
}
inline bool ExchangeMessage::has_orderacknowledgement() const {
  return _internal_has_orderacknowledgement();
}
inline void ExchangeMessage::set_has_orderacknowledgement() {
  _oneof_case_[0] = kOrderAcknowledgement;
}
inline void ExchangeMessage::clear_orderacknowledgement() {
  if (_internal_has_orderacknowledgement()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.orderacknowledgement_;
    }
    clear_has_command();
  }
}
inline ::exchange::OrderAcknowledgement* ExchangeMessage::release_orderacknowledgement() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.orderAcknowledgement)
  if (_internal_has_orderacknowledgement()) {
    clear_has_command();
      ::exchange::OrderAcknowledgement* temp = command_.orderacknowledgement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.orderacknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::OrderAcknowledgement& ExchangeMessage::_internal_orderacknowledgement() const {
  return _internal_has_orderacknowledgement()
      ? *command_.orderacknowledgement_
      : reinterpret_cast< ::exchange::OrderAcknowledgement&>(::exchange::_OrderAcknowledgement_default_instance_);
}
inline const ::exchange::OrderAcknowledgement& ExchangeMessage::orderacknowledgement() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.orderAcknowledgement)
  return _internal_orderacknowledgement();
}
inline ::exchange::OrderAcknowledgement* ExchangeMessage::unsafe_arena_release_orderacknowledgement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.orderAcknowledgement)
  if (_internal_has_orderacknowledgement()) {
    clear_has_command();
    ::exchange::OrderAcknowledgement* temp = command_.orderacknowledgement_;
    command_.orderacknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_orderacknowledgement(::exchange::OrderAcknowledgement* orderacknowledgement) {
  clear_command();
  if (orderacknowledgement) {
    set_has_orderacknowledgement();
    command_.orderacknowledgement_ = orderacknowledgement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.orderAcknowledgement)
}
inline ::exchange::OrderAcknowledgement* ExchangeMessage::_internal_mutable_orderacknowledgement() {
  if (!_internal_has_orderacknowledgement()) {
    clear_command();
    set_has_orderacknowledgement();
    command_.orderacknowledgement_ = CreateMaybeMessage< ::exchange::OrderAcknowledgement >(GetArenaForAllocation());
  }
  return command_.orderacknowledgement_;
}
inline ::exchange::OrderAcknowledgement* ExchangeMessage::mutable_orderacknowledgement() {
  ::exchange::OrderAcknowledgement* _msg = _internal_mutable_orderacknowledgement();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.orderAcknowledgement)
  return _msg;
}

// .exchange.TradeConfirmation tradeConfirmation = 13;
inline bool ExchangeMessage::_internal_has_tradeconfirmation() const {
  return command_case() == kTradeConfirmation;
}
inline bool ExchangeMessage::has_tradeconfirmation() const {
  return _internal_has_tradeconfirmation();
}
inline void ExchangeMessage::set_has_tradeconfirmation() {
  _oneof_case_[0] = kTradeConfirmation;
}
inline void ExchangeMessage::clear_tradeconfirmation() {
  if (_internal_has_tradeconfirmation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.tradeconfirmation_;
    }
    clear_has_command();
  }
}
inline ::exchange::TradeConfirmation* ExchangeMessage::release_tradeconfirmation() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.tradeConfirmation)
  if (_internal_has_tradeconfirmation()) {
    clear_has_command();
      ::exchange::TradeConfirmation* temp = command_.tradeconfirmation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.tradeconfirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::TradeConfirmation& ExchangeMessage::_internal_tradeconfirmation() const {
  return _internal_has_tradeconfirmation()
      ? *command_.tradeconfirmation_
      : reinterpret_cast< ::exchange::TradeConfirmation&>(::exchange::_TradeConfirmation_default_instance_);
}
inline const ::exchange::TradeConfirmation& ExchangeMessage::tradeconfirmation() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.tradeConfirmation)
  return _internal_tradeconfirmation();
}
inline ::exchange::TradeConfirmation* ExchangeMessage::unsafe_arena_release_tradeconfirmation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.tradeConfirmation)
  if (_internal_has_tradeconfirmation()) {
    clear_has_command();
    ::exchange::TradeConfirmation* temp = command_.tradeconfirmation_;
    command_.tradeconfirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_tradeconfirmation(::exchange::TradeConfirmation* tradeconfirmation) {
  clear_command();
  if (tradeconfirmation) {
    set_has_tradeconfirmation();
    command_.tradeconfirmation_ = tradeconfirmation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.tradeConfirmation)
}
inline ::exchange::TradeConfirmation* ExchangeMessage::_internal_mutable_tradeconfirmation() {
  if (!_internal_has_tradeconfirmation()) {
    clear_command();
    set_has_tradeconfirmation();
    command_.tradeconfirmation_ = CreateMaybeMessage< ::exchange::TradeConfirmation >(GetArenaForAllocation());
  }
  return command_.tradeconfirmation_;
}
inline ::exchange::TradeConfirmation* ExchangeMessage::mutable_tradeconfirmation() {
  ::exchange::TradeConfirmation* _msg = _internal_mutable_tradeconfirmation();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.tradeConfirmation)
  return _msg;
}

// .exchange.TopOfBookChange topOfBookChange = 21;
inline bool ExchangeMessage::_internal_has_topofbookchange() const {
  return command_case() == kTopOfBookChange;
}
inline bool ExchangeMessage::has_topofbookchange() const {
  return _internal_has_topofbookchange();
}
inline void ExchangeMessage::set_has_topofbookchange() {
  _oneof_case_[0] = kTopOfBookChange;
}
inline void ExchangeMessage::clear_topofbookchange() {
  if (_internal_has_topofbookchange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.topofbookchange_;
    }
    clear_has_command();
  }
}
inline ::exchange::TopOfBookChange* ExchangeMessage::release_topofbookchange() {
  // @@protoc_insertion_point(field_release:exchange.ExchangeMessage.topOfBookChange)
  if (_internal_has_topofbookchange()) {
    clear_has_command();
      ::exchange::TopOfBookChange* temp = command_.topofbookchange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.topofbookchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::exchange::TopOfBookChange& ExchangeMessage::_internal_topofbookchange() const {
  return _internal_has_topofbookchange()
      ? *command_.topofbookchange_
      : reinterpret_cast< ::exchange::TopOfBookChange&>(::exchange::_TopOfBookChange_default_instance_);
}
inline const ::exchange::TopOfBookChange& ExchangeMessage::topofbookchange() const {
  // @@protoc_insertion_point(field_get:exchange.ExchangeMessage.topOfBookChange)
  return _internal_topofbookchange();
}
inline ::exchange::TopOfBookChange* ExchangeMessage::unsafe_arena_release_topofbookchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:exchange.ExchangeMessage.topOfBookChange)
  if (_internal_has_topofbookchange()) {
    clear_has_command();
    ::exchange::TopOfBookChange* temp = command_.topofbookchange_;
    command_.topofbookchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeMessage::unsafe_arena_set_allocated_topofbookchange(::exchange::TopOfBookChange* topofbookchange) {
  clear_command();
  if (topofbookchange) {
    set_has_topofbookchange();
    command_.topofbookchange_ = topofbookchange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exchange.ExchangeMessage.topOfBookChange)
}
inline ::exchange::TopOfBookChange* ExchangeMessage::_internal_mutable_topofbookchange() {
  if (!_internal_has_topofbookchange()) {
    clear_command();
    set_has_topofbookchange();
    command_.topofbookchange_ = CreateMaybeMessage< ::exchange::TopOfBookChange >(GetArenaForAllocation());
  }
  return command_.topofbookchange_;
}
inline ::exchange::TopOfBookChange* ExchangeMessage::mutable_topofbookchange() {
  ::exchange::TopOfBookChange* _msg = _internal_mutable_topofbookchange();
  // @@protoc_insertion_point(field_mutable:exchange.ExchangeMessage.topOfBookChange)
  return _msg;
}

inline bool ExchangeMessage::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void ExchangeMessage::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline ExchangeMessage::CommandCase ExchangeMessage::command_case() const {
  return ExchangeMessage::CommandCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::exchange::NewOrder_SideType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::NewOrder_SideType>() {
  return ::exchange::NewOrder_SideType_descriptor();
}
template <> struct is_proto_enum< ::exchange::TopOfBookChange_SideType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::exchange::TopOfBookChange_SideType>() {
  return ::exchange::TopOfBookChange_SideType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_2eproto
