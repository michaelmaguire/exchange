// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace exchange {
constexpr NewOrder::NewOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(0u)
  , price_(0u)
  , quantity_(0u)
  , side_(0)

  , userorder_(0u){}
struct NewOrderDefaultTypeInternal {
  constexpr NewOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewOrderDefaultTypeInternal() {}
  union {
    NewOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewOrderDefaultTypeInternal _NewOrder_default_instance_;
constexpr CancelOrder::CancelOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(0u)
  , userorder_(0u){}
struct CancelOrderDefaultTypeInternal {
  constexpr CancelOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelOrderDefaultTypeInternal() {}
  union {
    CancelOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
constexpr FlushOrder::FlushOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FlushOrderDefaultTypeInternal {
  constexpr FlushOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlushOrderDefaultTypeInternal() {}
  union {
    FlushOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlushOrderDefaultTypeInternal _FlushOrder_default_instance_;
constexpr ExchangeMessage::ExchangeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequencenumber_(uint64_t{0u})
  , _oneof_case_{}{}
struct ExchangeMessageDefaultTypeInternal {
  constexpr ExchangeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeMessageDefaultTypeInternal() {}
  union {
    ExchangeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeMessageDefaultTypeInternal _ExchangeMessage_default_instance_;
}  // namespace exchange
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_order_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_order_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_order_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, user_),
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, price_),
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, quantity_),
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, side_),
  PROTOBUF_FIELD_OFFSET(::exchange::NewOrder, userorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::CancelOrder, user_),
  PROTOBUF_FIELD_OFFSET(::exchange::CancelOrder, userorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::FlushOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::exchange::ExchangeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::exchange::ExchangeMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::exchange::ExchangeMessage, sequencenumber_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::exchange::ExchangeMessage, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::exchange::NewOrder)},
  { 11, -1, sizeof(::exchange::CancelOrder)},
  { 18, -1, sizeof(::exchange::FlushOrder)},
  { 23, -1, sizeof(::exchange::ExchangeMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_NewOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_CancelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_FlushOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::exchange::_ExchangeMessage_default_instance_),
};

const char descriptor_table_protodef_order_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013order.proto\022\010exchange\"\246\001\n\010NewOrder\022\014\n\004"
  "user\030\001 \001(\r\022\016\n\006symbol\030\002 \001(\t\022\r\n\005price\030\003 \001("
  "\r\022\020\n\010quantity\030\004 \001(\r\022)\n\004side\030\005 \001(\0162\033.exch"
  "ange.NewOrder.SideType\022\021\n\tuserOrder\030\006 \001("
  "\r\"\035\n\010SideType\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001\".\n\013Canc"
  "elOrder\022\014\n\004user\030\001 \001(\r\022\021\n\tuserOrder\030\002 \001(\r"
  "\"\014\n\nFlushOrder\"\266\001\n\017ExchangeMessage\022\026\n\016se"
  "quenceNumber\030\001 \001(\004\022&\n\010newOrder\030\002 \001(\0132\022.e"
  "xchange.NewOrderH\000\022,\n\013cancelOrder\030\003 \001(\0132"
  "\025.exchange.CancelOrderH\000\022*\n\nflushOrder\030\004"
  " \001(\0132\024.exchange.FlushOrderH\000B\t\n\007commandb"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_order_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto = {
  false, false, 447, descriptor_table_protodef_order_2eproto, "order.proto", 
  &descriptor_table_order_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_order_2eproto::offsets,
  file_level_metadata_order_2eproto, file_level_enum_descriptors_order_2eproto, file_level_service_descriptors_order_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_order_2eproto_getter() {
  return &descriptor_table_order_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_order_2eproto(&descriptor_table_order_2eproto);
namespace exchange {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewOrder_SideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[0];
}
bool NewOrder_SideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewOrder_SideType NewOrder::BUY;
constexpr NewOrder_SideType NewOrder::SELL;
constexpr NewOrder_SideType NewOrder::SideType_MIN;
constexpr NewOrder_SideType NewOrder::SideType_MAX;
constexpr int NewOrder::SideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class NewOrder::_Internal {
 public:
};

NewOrder::NewOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:exchange.NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&userorder_) -
    reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
  // @@protoc_insertion_point(copy_constructor:exchange.NewOrder)
}

inline void NewOrder::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userorder_) -
    reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:exchange.NewOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewOrder::ArenaDtor(void* object) {
  NewOrder* _this = reinterpret_cast< NewOrder* >(object);
  (void)_this;
}
void NewOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.NewOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userorder_) -
      reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "exchange.NewOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .exchange.NewOrder.SideType side = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::exchange::NewOrder_SideType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 userOrder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          userorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.NewOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "exchange.NewOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // uint32 price = 3;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_price(), target);
  }

  // uint32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  // .exchange.NewOrder.SideType side = 5;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_side(), target);
  }

  // uint32 userOrder = 6;
  if (this->_internal_userorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_userorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.NewOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user());
  }

  // uint32 price = 3;
  if (this->_internal_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_price());
  }

  // uint32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quantity());
  }

  // .exchange.NewOrder.SideType side = 5;
  if (this->_internal_side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // uint32 userOrder = 6;
  if (this->_internal_userorder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userorder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewOrder::GetClassData() const { return &_class_data_; }

void NewOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NewOrder *>(to)->MergeFrom(
      static_cast<const NewOrder &>(from));
}


void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_user() != 0) {
    _internal_set_user(from._internal_user());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from._internal_userorder() != 0) {
    _internal_set_userorder(from._internal_userorder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  return true;
}

void NewOrder::InternalSwap(NewOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewOrder, userorder_)
      + sizeof(NewOrder::userorder_)
      - PROTOBUF_FIELD_OFFSET(NewOrder, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[0]);
}

// ===================================================================

class CancelOrder::_Internal {
 public:
};

CancelOrder::CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:exchange.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_, &from.user_,
    static_cast<size_t>(reinterpret_cast<char*>(&userorder_) -
    reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
  // @@protoc_insertion_point(copy_constructor:exchange.CancelOrder)
}

inline void CancelOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userorder_) -
    reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:exchange.CancelOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CancelOrder::ArenaDtor(void* object) {
  CancelOrder* _this = reinterpret_cast< CancelOrder* >(object);
  (void)_this;
}
void CancelOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userorder_) -
      reinterpret_cast<char*>(&user_)) + sizeof(userorder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 userOrder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user(), target);
  }

  // uint32 userOrder = 2;
  if (this->_internal_userorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.CancelOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user());
  }

  // uint32 userOrder = 2;
  if (this->_internal_userorder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userorder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOrder::GetClassData() const { return &_class_data_; }

void CancelOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CancelOrder *>(to)->MergeFrom(
      static_cast<const CancelOrder &>(from));
}


void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user() != 0) {
    _internal_set_user(from._internal_user());
  }
  if (from._internal_userorder() != 0) {
    _internal_set_userorder(from._internal_userorder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelOrder, userorder_)
      + sizeof(CancelOrder::userorder_)
      - PROTOBUF_FIELD_OFFSET(CancelOrder, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[1]);
}

// ===================================================================

class FlushOrder::_Internal {
 public:
};

FlushOrder::FlushOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:exchange.FlushOrder)
}
FlushOrder::FlushOrder(const FlushOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exchange.FlushOrder)
}

inline void FlushOrder::SharedCtor() {
}

FlushOrder::~FlushOrder() {
  // @@protoc_insertion_point(destructor:exchange.FlushOrder)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlushOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlushOrder::ArenaDtor(void* object) {
  FlushOrder* _this = reinterpret_cast< FlushOrder* >(object);
  (void)_this;
}
void FlushOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlushOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.FlushOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.FlushOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.FlushOrder)
  return target;
}

size_t FlushOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.FlushOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlushOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushOrder::GetClassData() const { return &_class_data_; }

void FlushOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlushOrder *>(to)->MergeFrom(
      static_cast<const FlushOrder &>(from));
}


void FlushOrder::MergeFrom(const FlushOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.FlushOrder)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushOrder::CopyFrom(const FlushOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.FlushOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushOrder::IsInitialized() const {
  return true;
}

void FlushOrder::InternalSwap(FlushOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[2]);
}

// ===================================================================

class ExchangeMessage::_Internal {
 public:
  static const ::exchange::NewOrder& neworder(const ExchangeMessage* msg);
  static const ::exchange::CancelOrder& cancelorder(const ExchangeMessage* msg);
  static const ::exchange::FlushOrder& flushorder(const ExchangeMessage* msg);
};

const ::exchange::NewOrder&
ExchangeMessage::_Internal::neworder(const ExchangeMessage* msg) {
  return *msg->command_.neworder_;
}
const ::exchange::CancelOrder&
ExchangeMessage::_Internal::cancelorder(const ExchangeMessage* msg) {
  return *msg->command_.cancelorder_;
}
const ::exchange::FlushOrder&
ExchangeMessage::_Internal::flushorder(const ExchangeMessage* msg) {
  return *msg->command_.flushorder_;
}
void ExchangeMessage::set_allocated_neworder(::exchange::NewOrder* neworder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (neworder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::exchange::NewOrder>::GetOwningArena(neworder);
    if (message_arena != submessage_arena) {
      neworder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworder, submessage_arena);
    }
    set_has_neworder();
    command_.neworder_ = neworder;
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.ExchangeMessage.newOrder)
}
void ExchangeMessage::set_allocated_cancelorder(::exchange::CancelOrder* cancelorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (cancelorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::exchange::CancelOrder>::GetOwningArena(cancelorder);
    if (message_arena != submessage_arena) {
      cancelorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelorder, submessage_arena);
    }
    set_has_cancelorder();
    command_.cancelorder_ = cancelorder;
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.ExchangeMessage.cancelOrder)
}
void ExchangeMessage::set_allocated_flushorder(::exchange::FlushOrder* flushorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (flushorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::exchange::FlushOrder>::GetOwningArena(flushorder);
    if (message_arena != submessage_arena) {
      flushorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flushorder, submessage_arena);
    }
    set_has_flushorder();
    command_.flushorder_ = flushorder;
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.ExchangeMessage.flushOrder)
}
ExchangeMessage::ExchangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:exchange.ExchangeMessage)
}
ExchangeMessage::ExchangeMessage(const ExchangeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequencenumber_ = from.sequencenumber_;
  clear_has_command();
  switch (from.command_case()) {
    case kNewOrder: {
      _internal_mutable_neworder()->::exchange::NewOrder::MergeFrom(from._internal_neworder());
      break;
    }
    case kCancelOrder: {
      _internal_mutable_cancelorder()->::exchange::CancelOrder::MergeFrom(from._internal_cancelorder());
      break;
    }
    case kFlushOrder: {
      _internal_mutable_flushorder()->::exchange::FlushOrder::MergeFrom(from._internal_flushorder());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:exchange.ExchangeMessage)
}

inline void ExchangeMessage::SharedCtor() {
sequencenumber_ = uint64_t{0u};
clear_has_command();
}

ExchangeMessage::~ExchangeMessage() {
  // @@protoc_insertion_point(destructor:exchange.ExchangeMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExchangeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void ExchangeMessage::ArenaDtor(void* object) {
  ExchangeMessage* _this = reinterpret_cast< ExchangeMessage* >(object);
  (void)_this;
}
void ExchangeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExchangeMessage::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:exchange.ExchangeMessage)
  switch (command_case()) {
    case kNewOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.neworder_;
      }
      break;
    }
    case kCancelOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.cancelorder_;
      }
      break;
    }
    case kFlushOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.flushorder_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void ExchangeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.ExchangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequencenumber_ = uint64_t{0u};
  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequenceNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .exchange.NewOrder newOrder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .exchange.CancelOrder cancelOrder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .exchange.FlushOrder flushOrder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_flushorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.ExchangeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequenceNumber = 1;
  if (this->_internal_sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequencenumber(), target);
  }

  // .exchange.NewOrder newOrder = 2;
  if (_internal_has_neworder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neworder(this), target, stream);
  }

  // .exchange.CancelOrder cancelOrder = 3;
  if (_internal_has_cancelorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cancelorder(this), target, stream);
  }

  // .exchange.FlushOrder flushOrder = 4;
  if (_internal_has_flushorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::flushorder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.ExchangeMessage)
  return target;
}

size_t ExchangeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.ExchangeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sequenceNumber = 1;
  if (this->_internal_sequencenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequencenumber());
  }

  switch (command_case()) {
    // .exchange.NewOrder newOrder = 2;
    case kNewOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.neworder_);
      break;
    }
    // .exchange.CancelOrder cancelOrder = 3;
    case kCancelOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.cancelorder_);
      break;
    }
    // .exchange.FlushOrder flushOrder = 4;
    case kFlushOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.flushorder_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExchangeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeMessage::GetClassData() const { return &_class_data_; }

void ExchangeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExchangeMessage *>(to)->MergeFrom(
      static_cast<const ExchangeMessage &>(from));
}


void ExchangeMessage::MergeFrom(const ExchangeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:exchange.ExchangeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
  switch (from.command_case()) {
    case kNewOrder: {
      _internal_mutable_neworder()->::exchange::NewOrder::MergeFrom(from._internal_neworder());
      break;
    }
    case kCancelOrder: {
      _internal_mutable_cancelorder()->::exchange::CancelOrder::MergeFrom(from._internal_cancelorder());
      break;
    }
    case kFlushOrder: {
      _internal_mutable_flushorder()->::exchange::FlushOrder::MergeFrom(from._internal_flushorder());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeMessage::CopyFrom(const ExchangeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.ExchangeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeMessage::IsInitialized() const {
  return true;
}

void ExchangeMessage::InternalSwap(ExchangeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sequencenumber_, other->sequencenumber_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace exchange
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::exchange::NewOrder* Arena::CreateMaybeMessage< ::exchange::NewOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exchange::NewOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::CancelOrder* Arena::CreateMaybeMessage< ::exchange::CancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exchange::CancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::FlushOrder* Arena::CreateMaybeMessage< ::exchange::FlushOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exchange::FlushOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::exchange::ExchangeMessage* Arena::CreateMaybeMessage< ::exchange::ExchangeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exchange::ExchangeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
